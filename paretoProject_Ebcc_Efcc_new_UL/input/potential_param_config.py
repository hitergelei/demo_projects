

# ++++++++++++++++++++++++++++++++++++++++++++++++ case1.01: 手动配置全部的26个参数【区间扩大版本】 +++++++++++++++++++++++++++++++++++++++



from collections import OrderedDict
parameter_distribution = OrderedDict()

# 简论文中给的势函数参数值
# param_dict = \
#     {
#     'ZBL_B0': 7.13869020382836,
#     'ZBL_B1': -3.42213335283108,
#     'ZBL_B2': -0.0631964668839501,
#     'ZBL_B3': 0.0652873462213261,
#     'Guage_S': 0.645841533432715,
#     'Guage_C': 0.401821332632028,
#      #-----------------------------------------------------电子密度函数的参数
#     'den_A1': 0.00107141640725646,
#     'den_A2': -0.00210005300301463,
#     'den_A3': 0.0578954145943402,
#     'den_A4': -0.113764843494093,
#     'den_A5': 0.0568853339673111,
#     'den_A6': 0.00145565626552289,
#     'den_A7': -0.00306278411316600,
#     'den_A8': 0.169636267604889,
#     'den_A9': -0.335855111019231,
#     'den_A10': 0.167896433936514,
#     #-----------------------------------------------------对势函数的参数
#     'P_a1': -0.000379992731900483,
#     'P_a2': -0.00970160325290971,
#     'P_a3': 0.0223615549371360,
#     'P_a4': 0.0102799999816850,
#     'P_a5': -0.0652603934277463,
#     'P_a6': -0.0541894195773795,
#     'P_a7': 0.304891344131519,
#     'P_a8': 0.277105917461963,
#     'P_a9': 0.386349382979606,
#     'P_a10': -0.122340639111536}

# hjchen 筛选出的culled_000.out的sim_id=7.0对应的参数(目前解决了bcc焓差问题，但需要再调fcc焓差问题)
param_dict = {'ZBL_B0': 7.17299419383639, 'ZBL_B1': -3.3908099167069428, 'ZBL_B2': -0.10753335820242796, 'ZBL_B3': 0.07746394544897076, 'Guage_S': 0.6009414312173177, 'Guage_C': 0.4072620977460011, 'den_A1': 0.018873037343547217, 'den_A2': -0.005097124900965006, 'den_A3': 0.012733327373406888, 'den_A4': -0.09824910304756487, 'den_A5': 0.042347003368955104, 'den_A6': -0.017953940906633305, 'den_A7': 0.0040360610794790705, 'den_A8': 0.1657524313539381, 'den_A9': -0.3690101865283109, 'den_A10': 0.17199213393912025, 'P_a1': -0.017786025870881475, 'P_a2': 0.024681996103199263, 'P_a3': 0.03240349237531506, 'P_a4': -0.035585490219191884, 'P_a5': -0.0624107587687226, 'P_a6': -0.005285578167642149, 'P_a7': 0.2652654571753122, 'P_a8': 0.2692452473382436, 'P_a9': 0.41762937674647577, 'P_a10': -0.13838076248066994}




# sim_id=22的result筛选的势函数参数
# param_dict = \
#     {
#     'ZBL_B0': 7.159084835407057,
#     'ZBL_B1': -3.444177415397331,
#     'ZBL_B2': -0.03722093437637,
#     'ZBL_B3': 0.06626222396255046,
#     'Guage_S': 0.597995297331263,
#     'Guage_C': 0.369094478048763,
#      #-----------------------------------------------------电子密度函数的参数
#     'den_A1': 0.03843376955381359,
#     'den_A2': -0.038419025327491536,
#     'den_A3': 0.04959301253247413,
#     'den_A4': -0.11516421963679535,
#     'den_A5': 0.08765389947935857,
#     'den_A6': -0.00464743869432805,
#     'den_A7': 0.021701481976945644,
#     'den_A8': 0.16031332508967477,
#     'den_A9': -0.3338796134012595,
#     'den_A10': 0.15203954526509728,
#     #-----------------------------------------------------对势函数的参数
#     'P_a1': 0.01191897826306345,
#     'P_a2': -0.033113753997466175,
#     'P_a3': 0.039233206576105156,
#     'P_a4': 0.005435507596054205,
#     'P_a5': -0.041451134623121125,
#     'P_a6': -0.057048200350557715,
#     'P_a7': 0.2719272926935072,
#     'P_a8': 0.23903703240927665,
#     'P_a9': 0.3683752163575538,
#     'P_a10': -0.09026592572253975}


# 势函数参数区间deta扩大0.05
deta = 0.05

# deta = 0
for key, value in param_dict.items():
    parameter_distribution[key] = {
        'type': 'uniform',
        'info': {
            'a': value-deta,
            'b': value+deta
        }
    }

# print('parameter_distribution初始化信息 = \n', parameter_distribution)
print('-------------------------')

# 验证对比
# deta = 0.2
for key, value in param_dict.items():
    print(key, '|', value-deta, '|', value+deta)




print('parameter_distribution.keys() = \n', parameter_distribution.keys())
# print()




#-------------------固定参数（不需要调的）----------------------
qele1 = 12.0  # for Mg
qele2 = 12.0  # for Mg


# Rk的输入值
Rk_INPUT = [6.3, 5.9, 5.5, 5.1, 4.7, 4.3, 3.9, 3.5, 3.1, 2.7]
# rk的输入值
rk_INPUT = [6.3, 5.9, 5.5, 5.1, 4.7, 4.3, 3.9, 3.5, 3.1, 2.7]



drho=2.0000e-0003     # 即drho
dr=6.3000e-0004
#-------------------固定参数（不需要调的）----------------------


if __name__ == '__main__':
    import numpy as np
    param_info = parameter_distribution
    param_names = list(param_info.keys())
    # print(param_names)

    param_dict = {}
    for pn in param_names:  # self._param_names = ['chrg_Mg', 'chrg_O', 'MgMg_A', 'MgMg_rho', 'MgMg_C', 'MgO_A', 'MgO_rho', 'MgO_C', 'OO_A', 'OO_rho', 'OO_C']
        param_dict[pn] = None  # 赋值得到 param_dict = {'chrg_Mg': None, 'chrg_O': None, 'MgMg_A': None, 'MgMg_rho': None, 'MgMg_C': None, 'MgO_A': None, 'MgO_rho': None, 'MgO_C': None, 'OO_A': None, 'OO_rho': None, 'OO_C': None}

    for pn in param_names:
        if param_info[pn]['type'] == 'uniform':  # 对6个自由参数进行均匀采样，例如，当pn = 'chrg_Mg'时， self._param_info['chrg_Mg'] = {'type': 'uniform', 'info': [1.5, 2.5]}
            a = param_info[pn]['info']['a']  # 当pn = 'chrg_Mg'时, a = 1.5   #  每次迭代时，均匀分布的下界a和b都是固定的，跟配置文件的模糊均匀分布一样？
            b = param_info[pn]['info']['b']  # 当pn = 'chrg_Mg'时, b = 2.5
            param_dict[pn] = np.random.uniform(a, b)  # 例如：np.random.uniform(a,b) = 2.4462101297886916，则param_dict = {'chrg_Mg': 2.4462101297886916}

    print('初始均匀采样param_dict = ', param_dict)
    print('len(param_dict.keys()) = ', len(param_dict.keys()))
